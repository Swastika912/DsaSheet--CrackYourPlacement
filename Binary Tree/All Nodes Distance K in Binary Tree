class Solution {
    int count = 0;
    List<Integer> list = new ArrayList<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        
        dfs(root,target , k , list);
        return list;
    }
    public int dfs(TreeNode root,TreeNode target, int k,List<Integer> list){
        if(root == null){
            return -1; 
        }
        if(root == target){
            preorder(target, k, list  );
            return 1;
        }
        int distance = dfs(root.left, target , k , list );
        if(distance> 0){
            if(distance == k){
                list.add(root.val);
            }else{
                preorder(root.right , k-distance-1 , list);
            }
            return distance +1;
        }
        distance = dfs(root.right, target , k , list);
         if(distance> 0){
            if(distance == k){
                list.add(root.val);
            }else{
                preorder(root.left , k-distance-1 , list);
            }
            return distance +1;
        }
       return -1;
    }
    
    public void preorder(TreeNode target, int k,List<Integer> list){
        if(target == null){
            return;
        }
    
        
        if(k == 0){
            list.add(target.val);
        }
        preorder(target.left , k-1 , list);
        
        preorder(target.right , k-1 , list);
        
    }
}
